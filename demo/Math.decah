// Grenoble INP - Ensimag projet GL -*- mode java -*-
// Library for class Math of Deca, coded in Deca

// Description 
// 
//      Class Math contenant des methodes de Calcul
// 
// Historique 
// 
//      20/06/2023 par gl03


class Math {

    float pi = 3.14159265358979224;
    protected float _floatAbsMinimumValue = 0.00000000000000000000000000000000000000000000000000014;

    // Description
    // 
    //      Methode appelée lors d'une racine paire d'un nombre négative afin de mener à une erreur
    // 
    // Input 
    //
    //      N/A 
    //
    // Output 
    // 
    //      ERROR  racine paire d'une valeur négative. 
    //      ERROR

      protected void _error_racine_negative()
      asm ("
            WSTR \"ERROR  racine paire d'une valeur négative. \"
            WNL
            ERROR
            
         ");


    // Description
    // 
    //      methode appelée lors du message d'erreur dans asin premier if 
    // 
    // Inputs 
    //
    //      N/A 
    //
    // Output 
    // 
    //      la valeur doit être entre -1 et 1
    //      ERROR

      protected void _error_param_asin()
      asm ("
            WSTR \"la valeur doit être entre -1 et 1\"
            WNL
            ERROR
            
      
         ");





    // Description 
    // 
    //      Methode de calcul de la réduction d'un angle
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output 
    // 
    //      reduceAngle(f)

    protected float reduceAngle(float f){

        while(f>2*this.pi){
            f=f-(2*this.pi);
        }
        if (f<-this.pi){
            f=f+(2*this.pi);
        }

        return f;
    }


    // Description 
    // 
    //      Methode de calcul de valeur absolue 
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output 
    // 
    //      abs(f)

    float abs(float f){
        if( f < 0){
            return -f;
        } else {
            return f;
        }
    }


    // Description 
    // 
    //      Methode de calcul de la racine carrée
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output 
    // 
    //      racine_carrée(float f)

    float sqrt(float f){
        float x;
        float y;
        float z;
        float q;        
        if(f<0){
            _error_racine_negative();
            
        }
        if(f==0.0){
            return 0.0;
        }
        else {
            z=1.0;
            q=f;
            while(q>=2.0){
                q=0.25*q;
                z=2.0*z;
            }
            while (q<0.5){
                q=4.0*q;
                z=0.5*z;
            }
            x=q;
            y=1.0-q;
            x=x*(1.0+0.5*y);
            y=0.25*(3.0+y)*y*y;
            while(y>=0.000000000000001){
            x=x*(1.0+0.5*y);
            y=0.25*(3.0+y)*y*y;
            }
            return x*z;
        }
    }


    // Description 
    // 
    //      Methode de calcul de puissance
    // 
    // Input 
    // 
    //      float f, float pow  
    // 
    // Output 
    // 
    //      f^pow  
    
    float pow(float f , float pow) {
        float result = 1.0;
        float abs_pow=abs(pow);
        if (pow==0.0){
            return 1.0;
        }
        if (pow==1.0){
            return f; 
        }
        if (pow==-1.0){
            return 1/f;
        }

        // Condition d'une racine paire négative 

        if(f<0 && pow==0.5){
            _error_racine_negative();
        }
        else if(f>=0){
            return sqrt(f);
        }

        while (abs_pow>0){
            result = result *f;
            abs_pow = abs_pow-1;
        }
        if(pow<0) {
            return 1/result;
        }
        return result;
    }



    // Description 
    // 
    //      Methode de calcul du sinus
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output 
    // 
    //      sin(f)


    float sin(float f){
        float epsilon = 0.00000000000000001;
        float sinus = 0.0;
        int sign = 1;
        float term = f;
        int n = 1;
        while (term > epsilon) {
            sinus = sinus + sign*term;
            sign = -sign;
            term = term * (f * f / (n+1) / (n+2));
            n = n + 2;
        }
        return sinus;
    }

    // Description 
    // 
    //      Methode de calcul du cosinus
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output 
    // 
    //      cos(f)

    float cos(float f){
        float r = f*f;
        float s = 42.0;
        int i = 10;
        while (i >= 1) {
            s = 4.0 * i - 2.0 + (-r) / s;
            i = i - 1;
        }
        s = s * s;
        return (s - r) / (s + r);
    }
    // Description 
    // 
    //      Methode de calcul de l'arcsinus
    // 
    // Input 
    // 
    //      float f 
    // 
    // Output  
    // 
    //      asin(f)

    float asin(float f){
        if(abs(f)>1){
            _error_param_asin();
        }
        if(abs(f)==1.0) {
            return f * this.pi / 2.0;
        }
        else {
            return atan(f / sqrt(1-f*f));
        }
    } 


    // Description  
    // 
    //      Methode de calcul de l'arctctan ; approximation de la serie de Taylor
    // 
    // Input  
    // 
    //      float f 
    // 
    // Output  
    // 
    //      atan(f) 

    float atan(float f){
        float a = 1.0 / sqrt(1.0 + (f * f));
        float b = 1.0;
        int n = 1;
        while (n < 11) {
            a = (a + b) / 2.0;
            b = sqrt(a * b);
            n = n + 1;
        }
        return f / (sqrt(1.0 + (f * f)) * a);
    }


    // Description  
    // 
    //      Methode de calcul de l'ulp
    //
    // Input 
    // 
    //      float f
    // 
    // Output 
    // 
    //      ulp(f)     

    float ulp(float f){
        float signe;
        float mantisse;
        float exposant;
        float ulp;
        // Cas particulier pour zéro
        if (f==0.0){
            return this._floatAbsMinimumValue;
        }

        // Calcul du signe 
        signe =  1.0;
        if (f<0.0){
            signe = -1.0;
        }

        // Calcul de la mantisse de l'exposant
        mantisse = f * signe;
        exposant = 0.0;

        while(mantisse<0.5){
            mantisse = mantisse / 2.0;
            exposant = exposant -1;
        }

        // Calcul de l'ulp
        ulp = pow(2.0, exposant);

        // Retourne l'ulp multiplié par le signe de f
        return ulp * signe;
    }
}

